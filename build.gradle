allprojects {
    group = 'org.jetbrains.kotlinx'
    version = '0.18-SNAPSHOT'
}

buildscript {
    ext.kotlin_version = '1.1.51'
    ext.junit_version = '4.12'
    ext.atomicFU_version = '0.9'
    ext.dokka_version = '0.9.15'
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicFU_version"
        classpath "org.jetbrains.kotlinx:kotlinx-coroutines-debug-gradle-plugin"
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'kotlinx-atomicfu'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    kotlin.experimental.coroutines "enable"

    dokka {
        ext.core_docs_url = 'https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/'
        ext.core_docs_file = "${rootProject.projectDir}/core/kotlinx-coroutines-core/build/dokka/kotlinx-coroutines-core/package-list"
        linkMapping {
            dir = "$projectDir/src/main/kotlin"
            url = "http://github.com/kotlin/kotlinx.coroutines/tree/master/${project.name}/src/main/kotlin"
            suffix = "#L"
        }
        includes = ['README.md']
        outputFormat = 'kotlin-website'
        jdkVersion = 8
    }

    tasks.withType(Test) {
        testLogging.showStandardStreams = true
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives sourcesJar
    }

    repositories {
        jcenter()
        maven { url "http://jcenter.bintray.com" }
        maven { url "http://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/devexperts/Maven/" }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

        testCompile "junit:junit:$junit_version"
    }
}

def internal = ['benchmarks', 'knit', 'site']

ext.skipClassesTransformation = { projectName ->
    return internal.contains(projectName)
}

ext.skipPublishing = { projectName ->
    return (internal + 'kotlinx-coroutines-rx-example').contains(projectName)
}

subprojects {
    if (!skipClassesTransformation(it.name)) {
        apply plugin: 'kotlinx-coroutines-debug'

        dependencies {
            compileOnly "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"

            testCompile "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"
            testCompile "org.jetbrains.kotlinx:kotlinx-coroutines-debug-test"
        }

        atomicFU {
            inputFiles = sourceSets.main.output.classesDirs
            outputDir = file("$buildDir/classes-atomicfu/main")
            classPath = sourceSets.main.runtimeClasspath
        }

        jar {
            from files(atomicFU.outputs, sourceSets.main.output.resourcesDir)
        }

        test {
            classpath = files(configurations.testRuntime, atomicFU.outputs, sourceSets.test.output.classesDirs,
                    sourceSets.main.output.resourcesDir)
        }

        debuggerTransformMain {
            inputFiles = atomicFU.outputs.files
        }

        testWithDebugger {
            useJUnit {
                includeCategories 'kotlinx.coroutines.debug.test.DebuggableTest'
            }
        }

        if (it.name != 'kotlinx-coroutines-core') {
            dependencies {
                compile project(':kotlinx-coroutines-core')
                //the only way IDEA can resolve test classes
                testCompile project(':kotlinx-coroutines-core').sourceSets.test.output
            }

            dokka.dependsOn project(':kotlinx-coroutines-core').dokka

            dokka.externalDocumentationLink {
                url = new URL(dokka.core_docs_url)
                packageListUrl = new URL("file://${dokka.core_docs_file}")
            }
        }
    }


    if (!skipPublishing(it.name)) {
        apply plugin: 'maven-publish'
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                }
            }
        }
    }
}

apply plugin: 'base'

clean.dependsOn gradle.includedBuilds.collect { it.task(':clean') }